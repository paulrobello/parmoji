name: Publish üêç üì¶ to TestPyPI

# Minimal default permissions
permissions:
  contents: read

on:
  workflow_dispatch:

# Cancel in-progress runs of the same ref
concurrency:
  group: publish-dev-${{ github.ref }}
  cancel-in-progress: true
jobs:
  setup:
    uses: ./.github/workflows/reusable-setup.yml

  publish-to-testpypi:
    if: github.event_name == 'workflow_dispatch'
    name: Publish üêç distribution üì¶ to TestPyPI
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Restore cached build artifacts
        id: cache
        uses: actions/cache@v4
        with:
          path: dist
          key: dist-${{ runner.os }}-3.12-${{ hashFiles('**/pyproject.toml', 'src/**/*.py') }}-${{ github.sha }}
          restore-keys: |
            dist-${{ runner.os }}-3.12-${{ hashFiles('**/pyproject.toml', 'src/**/*.py') }}-
            dist-${{ runner.os }}-3.12-
          fail-on-cache-miss: false
      - name: Build package if cache miss
        if: steps.cache.outputs.cache-hit != 'true'
        run: make package-all
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  notify-discord:
    name: Notify Discord
    needs: [setup, publish-to-testpypi]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on failure
        if: needs.publish-to-testpypi.result != 'success'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          REF: ${{ github.ref }}
          WORKFLOW: ${{ github.workflow }}
          SERVER_URL: ${{ github.server_url }}
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          url="${DISCORD_WEBHOOK_URL:-$DISCORD_WEBHOOK}"
          if [ -z "$url" ]; then echo "No Discord webhook configured"; exit 0; fi
          ver=${VERSION:-unknown}
          msg="‚ùå TestPyPI publish failed for v${ver} on ${REF}. ${SERVER_URL}/${REPO}/actions/runs/${RUN_ID}"
          payload=$(jq -n --arg content "$msg" '{content: $content}') || payload="{\"content\": \"$msg\" }"
          curl -fsSL -H 'Content-Type: application/json' -d "$payload" "$url" || true
      - name: Notify on success
        if: needs.publish-to-testpypi.result == 'success'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          REF: ${{ github.ref }}
          WORKFLOW: ${{ github.workflow }}
          SERVER_URL: ${{ github.server_url }}
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          url="${DISCORD_WEBHOOK_URL:-$DISCORD_WEBHOOK}"
          if [ -z "$url" ]; then echo "No Discord webhook configured"; exit 0; fi
          ver=${VERSION:-unknown}
          msg="‚úÖ Published v${ver} to TestPyPI. ${SERVER_URL}/${REPO}/actions/runs/${RUN_ID}"
          payload=$(jq -n --arg content "$msg" '{content: $content}') || payload="{\"content\": \"$msg\" }"
          curl -fsSL -H 'Content-Type: application/json' -d "$payload" "$url" || true
